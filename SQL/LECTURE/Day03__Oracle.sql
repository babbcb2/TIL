
SELECT  EMP_NAME,
        SALARY
FROM    EMPLOYEE
WHERE   DEPT_ID = '50'
OR      DEPT_ID IS NULL
ORDER BY SALARY DESC;

SELECT  EMP_NAME, HIRE_DATE, DEPT_ID
FROM    EMPLOYEE
WHERE   HIRE_DATE > TO_DATE('20030101','YYYYMMDD')
ORDER BY DEPT_ID DESC, HIRE_DATE, EMP_NAME ;

SELECT  EMP_NAME AS 이름,
        HIRE_DATE AS 입사일,
        DEPT_ID AS 부서코드
FROM    EMPLOYEE
WHERE   HIRE_DATE > TO_DATE('20030101','YYYYMMDD')
ORDER BY 부서코드 DESC, 입사일, 이름 ;

SELECT  EMP_NAME AS 이름,
        HIRE_DATE AS 입사일,
        DEPT_ID AS 부서코드
FROM    EMPLOYEE
WHERE   HIRE_DATE > TO_DATE('20030101','YYYYMMDD')
ORDER BY 3 DESC, 2, 1 ;


-- 오류발생
SELECT  EMP_NAME, DEPT_ID, COUNT(*)
FROM    EMPLOYEE
GROUP BY DEPT_ID;


-- 수정
-- GROUP BY 에 EMP_NAME 정의 내려줌
SELECT  EMP_NAME, DEPT_ID, COUNT(*)
FROM    EMPLOYEE
GROUP BY EMP_NAME, DEPT_ID
ORDER BY 2 DESC;


SELECT  DEPT_ID, SUM(SALARY)
FROM    EMPLOYEE
GROUP BY DEPT_ID
HAVING  SUM(SALARY) > 900000;

SELECT  *
FROM    DEPARTMENT;

-- JOIN
SELECT  EMP_NAME,
        DEPT_NAME,
        D.DEPT_ID
FROM    EMPLOYEE E,
        DEPARTMENT D
WHERE   E.DEPT_ID = D.DEPT_ID;


-- ANSI
-- JOIN USING vs ON 차이
-- USING: 칼럽의 이름이 동일시 값 출력
-- ON   : 칼럼의 이름이 동일하지 않을경우 or 조건문 필요시(비교연산자)
        
SELECT  EMP_NAME,
        DEPT_NAME
FROM    EMPLOYEE
JOIN    DEPARTMENT USING(DEPT_ID) ;

SELECT  EMP_NAME,
        DEPT_NAME,
        LOC_DESCRIBE
FROM    EMPLOYEE E
JOIN    DEPARTMENT D ON(E.DEPT_ID = D.DEPT_ID)
JOIN    LOCATION L  ON(L.LOCATION_ID = D.LOC_ID)

-- FULL JOIN
-- LEFT JOIN, RIGTH 

SELECT  EMP_NAME,
        DEPT_NAME
FROM    EMPLOYEE
FULL JOIN    DEPARTMENT USING(DEPT_ID) ;


SELECT  EMP_NAME,
        SALARY,
        SLEVEL
FROM    SAL_GRADE S
JOIN    EMPLOYEE E ON(SALARY BETWEEN LOWEST AND HIGHEST);


SELECT  E.EMP_NAME, M.EMP_NAME, S.EMP_NAME
FROM    EMPLOYEE E
LEFT JOIN   EMPLOYEE M ON(E.MGR_ID = M.EMP_ID)
LEFT JOIN   EMPLOYEE S ON(M.MGR_ID = S.EMP_ID)
ORDER BY 3;

-- 직급이 대리이고, 지역이 아시아로 시작하는 필터링

SELECT  E.EMP_NAME,
        E.SALARY,
        J.JOB_TITLE,
        D.DEPT_NAME,
        L.LOC_DESCRIBE,
        C.COUNTRY_NAME,
        S.SLEVEL
FROM    EMPLOYEE E
LEFT JOIN   JOB J USING (JOB_ID)
LEFT JOIN   DEPARTMENT D ON (E.DEPT_ID = D.DEPT_ID)
LEFT JOIN   LOCATION   L ON (D.LOC_ID = L.LOCATION_ID)
LEFT JOIN   COUNTRY    C ON (L.COUNTRY_ID = C.COUNTRY_ID)
JOIN        SAL_GRADE  S ON (E.SALARY BETWEEN S.LOWEST AND S.HIGHEST)
WHERE       JOB_TITLE = '대리' AND LOC_DESCRIBE LIKE '아시아%';

